{
    "collab_server" : "",
    "contents" : "\ndipExtension <- function(breaks, labels, RNAdata, rawRNAdata, minimumCounts){\n\n  x.1 <- 0\n  x.2 <- 0\n  x.3 <- 0\n  x.4 <- 0\n  if(missing(breaks)) {\n    x.1 <- 0; print(\"cutting = FALSE\")\n  } else {\n    x.1 <-1\n  }\n  if(missing(labels)) {\n    x.2 <- 0\n  } else {\n    x.2 <-1\n  }\n  if(missing(rawRNAdata)) {\n    x.3 <- 0; print(\"filtering = FALSE\")\n  } else {\n    x.3 <-1\n  }\n  if(missing(minimumCounts)) {\n    minimumCounts <- 0\n  }\n  print(\"reading in data\")\n  if(x.1==1) {if(length(breaks) != (length(labels) + 1)) {print(\"invalid dimensions of breaks and labels\")}}\n  RNAdata <- as.matrix(read.table(RNAdata))\n  rawRNAdata <- read.table(rawRNAdata)\n  RNAdataDF <- data.frame(RNAdata)\n\n\n  #filtering of RNAdataDF and DipOutputDF. If the DipOutputDF one fails, move this filter in front of the DipOutputDF creation.\n  if(x.3 == 1) {\tprint(\"filtering\")\n    #row.names(DipOutputDF) <- row.names(RNAdataDF)\n    rawRNAdata$max <- 0\n    rawRNAdata$max <- apply(rawRNAdata, 1, max)\n    RNArawbelow <- rawRNAdata[which(rawRNAdata$max<minimumCounts),]\n    rr <- row.names(RNArawbelow)\n    RNAdataDF_R <- RNAdataDF[!(row.names(RNAdataDF) %in% rr),]\n    RNAdataMat <- as.matrix(RNAdataDF_R)\n    DipOutput <- matrix(nrow=nrow(RNAdataDF_R), ncol=1)\n    DipOutputPvals <- matrix(nrow=nrow(RNAdataDF_R), ncol=1)\n    #DipOutputDF <- DipOutputDF[!(row.names(DipOutputDF)) %in% rr,]\n    #row.names(DipOutputDF) <- c(1:nrow(DipOutputDF))\n  }\n\n\n\n  print(\"conducting dip analysis\")\n  for (k in 1:nrow(RNAdataMat)){\t#dip analysis\n\n    e <- diptest::dip(RNAdataMat[k,], full.result = FALSE, min.is.0 = FALSE, debug = FALSE)\n    f <- diptest::dip.test(RNAdataMat[k,], simulate.p.value = FALSE, B = 2000)\n    DipOutput[k,1] <- e #save output into pre-prepared matrix\n    DipOutputPvals[k,1] <- f$p_value\n  }\n\n  DipOutputDF <- data.frame(DipOutput)\n  DipOutputPDF <- data.frame(DipOutputPvals)\n  DipOutputDF$GeneID <- rownames(RNAdataDF_R)\n  DipOutputDF$Dip_p_Vals <- DipOutputPDF[,1]\n\n\n  #cutting\n  if(x.1 == 1 && x.2 == 1) {\n    print(\"cutting\")\n    DipOutputDF$Region <- cut(DipOutputDF$DipOutput,\n                              breaks = breaks,\n                              labels = labels,\n                              right = FALSE)\n    DipOutputDF$Region <- as.numeric(as.character(DipOutputDF$Region))\n\n  }\t#breaks\n\n  ZeroXMedian <- matrix(nrow=nrow(RNAdataDF_R), ncol=1)\n  ZeroIMedian <- matrix(nrow=nrow(RNAdataDF_R), ncol=1)\n  row.names(ZeroXMedian) <- row.names(RNAdataDF_R)\n  colnames(ZeroXMedian) <- c(\"Zero-excluded Median\")\n  row.names(ZeroIMedian) <- row.names(RNAdataDF_R)\n  colnames(ZeroIMedian) <- c(\"Zero-included Median\")\n\n  print(\"calculating ZXM and ZIM\")\n  for(k in 1:nrow(RNAdataDF_R)) {\n    shelf <- RNAdataDF_R[k,]\t#which(RNAdataDF[k,i] >= 0)\n    row.names(shelf) <- c(1)\n    shelf2 <- shelf[,(shelf[1,]>0)]\n    ZeroXMedian[k,] <- median(as.numeric(shelf2))\n    ZeroIMedian[k,] <- median(as.numeric(shelf))\n  }\n\n  ReducedZeroXMedian <- ZeroXMedian[!(row.names(ZeroXMedian) %in% rr),]\n  DipOutputDF$ZeroXMedian <- as.numeric(ZeroXMedian)\n  DipOutputDF$ZeroIMedian <- as.numeric(ZeroIMedian)\n  DipOutputDF <- mutate(DipOutputDF, Divergence = ZeroXMedian-ZeroIMedian)\n  DipOutputDF <- DipOutputDF[,c(2, 1, 3, 4, 5, 6)]\n\n\n}\n\nplotSamplesByDipRegion <- function(minimumCounts, breaks, labels, rawRNAdata,\n                                  RNAdata, xlab, samples) {\n  # parameters: filter, break locations (1-4 OR \"NONE\"), labels,\n  # rawRNAdata, normRNAdata, xlab(xx) (make it work from 1 to 5. No default), samples(number to be sampled)\n\n  xx <- xlab\n  if(missing(filter)) {print(\"no filter applied\")}\n  if(missing(RNAdata) && missing(rawRNAdata)) {print(\"RNA data missing\")}\n  if(missing(breaks)) {print(\"no breaks selected\");  regions <- 1}\n  else(regions <- (length(breaks) + 1))\n  if(missing(RNAdata) && !missing(rawRNAdata)) {RNAdata <- rawRNAdata}\n  if(missing(samples)) {samples <- 4}\n\n\n  #RNAdata <- read.table(\"/Users/sieker/Dropbox/Jeremy Rotation Files/normalized counts/DESeq_normalizedcounts_iNsEndoNsMEFs.txt\")\n  RNAdata <- read.table(RNAdata)\n\n  #RNArawcounts <- data.frame(read.table(\"/Users/sieker/Dropbox/Jeremy Rotation Files/rawcounts/DESeq_rawcounts_iNsEndoNsMEFs.txt\"))\n  RNArawcounts <- read.table(RNAdata)\n\n\n  RNAdataDF <- data.frame(RNAdata)\n  RNArawcounts$max <- 0\n  RNArawcounts$max <- apply(RNArawcounts, 1, max)\n  RNArawbelow50 <- RNArawcounts[which(RNArawcounts$max<minimumCounts),]\n  rr <- row.names(RNArawbelow50)\n  RNAdataDF_R <- RNAdataDF[(!row.names(RNAdataDF) %in% rr), ]\n  RNAdataMat <- as.matrix(RNAdataDF_R)\n\n  DipOutput <- matrix(nrow=nrow(RNAdataDF_R), ncol=1) #preparing a matrix to receive output in the function step\n  DipOutputPvals <- matrix(nrow=nrow(RNAdataDF_R), ncol=1) #preparing a matrix to receive output in the function step\n\n\n\n  #setup and calculation\n  for (k in 1:nrow(RNAdataMat)){\n\n    e <- diptest::dip(RNAdataMat[k,], full.result = FALSE, min.is.0 = FALSE, debug = FALSE) #actual dip statistical test\n    f <- diptest::dip.test(RNAdataMat[k,], simulate.p.value = FALSE, B = 2000)\n    DipOutput[k,1] <- e #save output into pre-prepared matrix\n    DipOutputPvals[k,1] <- f$p_value\n    ##consider extracting the rownames off RNAdata as a vector, which you can then reimpute here\n  }\n\n  DipOutputDF <- data.frame(DipOutput) # matrix -> dataframe\n  DipOutputPDF <- data.frame(DipOutputPvals)\n  DipOutputDF$GeneID <- rownames(RNAdataDF_R)\n\n  if(regions==1){labels = \"Undivided Sample\"}\n  if(regions==2){labels = c(\"Region A\", \"Region B\")}\n  if(regions==3){labels = c(\"Region A\", \"Region B\", \"Region C\")}\n  if(regions==4){labels = c(\"Region A\", \"Region B\", \"Region C\", \"Region D\")}\n  if(regions==5){labels = c(\"Region A\", \"Region B\", \"Region C\", \"Region D\", \"Region E\")}\n\n\n  if(breaks!=\"NONE\" | (is.numeric(breaks) && breaks > 0)){\n    DipOutputDF$Region <- cut(DipOutputDF$DipOutput,\n                              breaks = breaks,\n                              labels = labels,\n                              right = FALSE)\n    DipOutputDF$Region <- as.numeric(as.character(DipOutputDF$Region))\n  }\n\n  ZeroXMedian <- matrix(nrow=nrow(RNAdataDF_R), ncol=1)\n  ZeroIMedian <- matrix(nrow=nrow(RNAdataDF_R), ncol=1)\n  row.names(ZeroXMedian) <- row.names(RNAdataDF_R)\n  colnames(ZeroXMedian) <- c(\"Zero-excluded Median\")\n  row.names(ZeroIMedian) <- row.names(RNAdataDF_R)\n  colnames(ZeroIMedian) <- c(\"Zero-included Median\")\n\n  for(k in 1:nrow(RNAdataDF_R)) {\n    shelf <- RNAdataDF_R[k,]\n    row.names(shelf) <- c(1)\n    shelf2 <- shelf[,(shelf[1,]>0)]\n    ZeroXMedian[k,] <- median(as.numeric(shelf2))\n    ZeroIMedian[k,] <- median(as.numeric(shelf))\n  }\n\n\n  DipOutputDF$ZeroXMedian <- as.numeric(ZeroXMedian)\n  DipOutputDF$ZeroIMedian <- as.numeric(ZeroIMedian)\n  DipOutputDF <- mutate(DipOutputDF, Divergence = ZeroXMedian-ZeroIMedian)\n\n  return(DipOutputDF)\n\n  if(samples==1){sublabels = \"Sample A\"}\n  if(samples==2){sublabels = c(\"Sample A\", \"Sample B\")}\n  if(samples==3){sublabels = c(\"Sample A\", \"Sample B\", \"Sample C\")}\n  if(samples==4){sublabels = c(\"Sample A\", \"Sample B\", \"Sample C\", \"Sample D\")}\n  if(samples==5){sublabels = c(\"Sample A\", \"Sample B\", \"Sample C\", \"Sample D\", \"Sample E\")}\n  if(samples==6){sublabels = c(\"Sample A\", \"Sample B\", \"Sample C\", \"Sample D\", \"Sample E\", \"Sample F\")}\n\n  #plotting (executables)\n\n  if(regions>=1){\t#pick four from whole distribution\n    ifelse(regions==1, DF.1 <- DipOutputDF, DF.1 <- DipOutputDF[DipOutputDF$Region==labels[1],])\n    ifelse(nrow(DF.1)<samples, print(\"error: too few observations\n                                     remaining in region 1 for declared sampling number to be selected\"), print(\"Region 1 samples selected\"))\n    DF.1Samples <- DF.1[sample(nrow(DF.1), size = samples, replace = FALSE),]\n    DF.1Names <- DF.1Samples[,\"GeneID\"]\n    DF.1SampleGeneData <- data.frame(t(RNAdataDF_R[row.names(RNAdataDF_R) %in% DF.1Names, ]))\n    SampleNames <- DF.1Names\n    R1A <- paste(SampleNames[1], collapse = NULL)\n    pp1 <- ggplot2::ggplot(DF.1SampleGeneData, aes_string(x=R1A)) + ggplot2::geom_density(adjust = 1/5, color = \"navy blue\") + ggplot2::theme_gray() + ggplot2::ggtitle(R1A) + ggplot2::ylab(\"Density\") + ggplot2::xlab(xx)\n    if(samples>=2){\n      R1B <- paste(SampleNames[2], collapse = NULL)\n      pp2 <- ggplot2::ggplot(DF.1SampleGeneData, aes_string(x=R1B)) + ggplot2::geom_density(adjust = 1/5, color = \"navy blue\") + ggplot2::theme_gray() + ggplot2::xlab(xx) + ggplot2::ggtitle(R1B) + ggplot2::ylab(\"Density\")\n    }\n    if(samples>=3){\n      R1C <- paste(SampleNames[3], collapse = NULL)\n      pp3 <- ggplot2::ggplot(DF.1SampleGeneData, aes_string(x=R1C)) + ggplot2::geom_density(adjust = 1/5, color = \"navy blue\") + ggplot2::theme_gray() + ggplot2::ggtitle(R1C) + ggplot2::ylab(\"Density\") + ggplot2::xlab(xx)\n    }\n    if(samples>=4){\n      R1D <- paste(SampleNames[4], collapse = NULL)\n      pp4 <- ggplot2::ggplot(DF.1SampleGeneData, aes_string(x=R1D)) + ggplot2::geom_density(adjust = 1/5, color = \"navy blue\") + ggplot2::theme_gray() + ggplot2::ggtitle(R1D) + ggplot2::ylab(\"Density\") + ggplot2::xlab(xx)\n    }\n    if(samples>=5){\n      R1E <- paste(SampleNames[5], collapse = NULL)\n      pp5 <- ggplot2::ggplot(DF.1SampleGeneData, aes_string(x=R1E)) + ggplot2::geom_density(adjust = 1/5, color = \"navy blue\") + ggplot2::theme_gray() + ggplot2::ggtitle(R1E) + ggplot2::ylab(\"Density\") + ggplot2::xlab(xx)\n    }\n    if(samples>=6){\n      R1F <- paste(SampleNames[6], collapse = NULL)\n      pp6 <- ggplot2::ggplot(DF.1SampleGeneData, aes_string(x=R1F)) + ggplot2::geom_density(adjust = 1/5, color = \"navy blue\") + ggplot2::theme_gray() + ggplot2::ggtitle(R1F) + ggplot2::ylab(\"Density\") + ggplot2::xlab(xx)\n    }\n    if(samples==1){x1 = pp1}\n    if(samples==2){x1 = gridExtra::grid.arrange(pp1, pp2, ncol=2)}\n    if(samples==3){x1 = gridExtra::grid.arrange(pp1, pp2, pp3, ncol=3)}\n    if(samples==4){x1 = gridExtra::grid.arrange(pp1, pp2, pp3, pp4,  ncol=2)}\n    if(samples==5){x1 = gridExtra::grid.arrange(pp1, pp2, pp3, pp4, pp5, ncol=2)}\n    if(samples==6){x1 = gridExtra::grid.arrange(pp1, pp2, pp3, pp4, pp5, pp6, ncol=2)}\n  }\n\n  if(regions>=2){\n    DF.2 <- DipOutputDF[DipOutputDF$Region==labels[2],]\n    ifelse(nrow(DF.2)<samples, print(\"error: too few observations\n                                     remaining in region 2 for declared number of samples to be selected\"), print(\"Region 2 samples selected\"))\n    DF.2Samples <- DF.2[sample(nrow(DF.2), size = samples, replace = FALSE),]\n    DF.2Names <- DF.2Samples[,\"GeneID\"]\n    DF.2SampleGeneData <- data.frame(t(RNAdataDF_R[row.names(RNAdataDF_R) %in% DF.2Names, ]))\n    SampleNames2 <- DF.2Names\n    R2A <- paste(SampleNames2[1], collapse = NULL)\n    pp1 <- ggplot2::ggplot(DF.2SampleGeneData, aes_string(x=R2A)) + ggplot2::geom_density(adjust = 1/5, color = \"navy blue\") + ggplot2::theme_gray() + ggplot2::ggtitle(R1A) + ggplot2::ylab(\"Density\") + ggplot2::xlab(xx)\n    if(samples>=2){\n      R2B <- paste(SampleNames2[2], collapse = NULL)\n      pp2 <- ggplot2::ggplot(DF.2SampleGeneData, aes_string(x=R2B)) + ggplot2::geom_density(adjust = 1/5, color = \"navy blue\") + ggplot2::theme_gray() + ggplot2::xlab(xx) + ggplot2::ggtitle(R1B) + ggplot2::ylab(\"Density\")\n    }\n    if(samples>=3){\n      R2C <- paste(SampleNames2[3], collapse = NULL)\n      pp3 <- ggplot2::ggplot(DF.2SampleGeneData, aes_string(x=R2C)) + ggplot2::geom_density(adjust = 1/5, color = \"navy blue\") + ggplot2::theme_gray() + ggplot2::ggtitle(R1C) + ggplot2::ylab(\"Density\") + ggplot2::xlab(xx)\n    }\n    if(samples>=4){\n      R2D <- paste(SampleNames2[4], collapse = NULL)\n      pp4 <- ggplot2::ggplot(DF.2SampleGeneData, aes_string(x=R2D)) + ggplot2::geom_density(adjust = 1/5, color = \"navy blue\") + ggplot2::theme_gray() + ggplot2::ggtitle(R1D) + ggplot2::ylab(\"Density\") + ggplot2::xlab(xx)\n    }\n    if(samples>=5){\n      R2E <- paste(SampleNames2[5], collapse = NULL)\n      pp5 <- ggplot2::ggplot(DF.2SampleGeneData, aes_string(x=R2E)) + ggplot2::geom_density(adjust = 1/5, color = \"navy blue\") + ggplot2::theme_gray() + ggplot2::ggtitle(R1E) + ggplot2::ylab(\"Density\") + ggplot2::xlab(xx)\n    }\n    if(samples>=6){\n      R2F <- paste(SampleNames2[6], collapse = NULL)\n      pp6 <- ggplot2::ggplot(DF.2SampleGeneData, aes_string(x=R2F)) + ggplot2::geom_density(adjust = 1/5, color = \"navy blue\") + ggplot2::theme_gray() + ggplot2::ggtitle(R1F) + ggplot2::ylab(\"Density\") + ggplot2::xlab(xx)\n    }\n    if(samples==1){x2 = pp1}\n    if(samples==2){x2 = gridExtra::grid.arrange(pp1, pp2, ncol=2)}\n    if(samples==3){x2 = gridExtra::grid.arrange(pp1, pp2, pp3, ncol=3)}\n    if(samples==4){x2 = gridExtra::grid.arrange(pp1, pp2, pp3, pp4,  ncol=2)}\n    if(samples==5){x2 = gridExtra::grid.arrange(pp1, pp2, pp3, pp4, pp5, ncol=2)}\n    if(samples==6){x2 = gridExtra::grid.arrange(pp1, pp2, pp3, pp4, pp5, pp6, ncol=2)}\n  }\n\n  if(regions>=3){\n    DF.3 <- DipOutputDF[DipOutputDF$Region==labels[3],]\n    ifelse(nrow(DF.3)<samples, print(\"error: too few observations\n                                     remaining in region 3 for declared number of samples to be selected\"), print(\"Region 3 samples selected\"))\n    DF.3Samples <- DF.3[sample(nrow(DF.3), size = samples, replace = FALSE),]\n    DF.3Names <- DF.3Samples[,\"GeneID\"]\n    DF.3SampleGeneData <- data.frame(t(RNAdataDF_R[row.names(RNAdataDF_R) %in% DF.3Names, ]))\n    SampleNames3 <- DF.3Names\n    R3A <- paste(SampleNames3[1], collapse = NULL)\n    pp1 <- ggplot2::ggplot(DF.3SampleGeneData, aes_string(x=R3A)) + ggplot2::geom_density(adjust = 1/5, color = \"navy blue\") + ggplot2::theme_gray() + ggplot2::ggtitle(R3A) + ggplot2::ylab(\"Density\") + ggplot2::xlab(xx)\n    if(samples>=2){\n      R3B <- paste(SampleNames3[2], collapse = NULL)\n      pp2 <- ggplot2::ggplot(DF.3SampleGeneData, aes_string(x=R3B)) + ggplot2::geom_density(adjust = 1/5, color = \"navy blue\") + ggplot2::theme_gray() + ggplot2::xlab(xx) + ggplot2::ggtitle(R3B) + ggplot2::ylab(\"Density\")\n    }\n    if(samples>=3){\n      R3C <- paste(SampleNames3[3], collapse = NULL)\n      pp3 <- ggplot2::ggplot(DF.3SampleGeneData, aes_string(x=R3C)) + ggplot2::geom_density(adjust = 1/5, color = \"navy blue\") + ggplot2::theme_gray() + ggplot2::ggtitle(R3C) + ggplot2::ylab(\"Density\") + ggplot2::xlab(xx)\n    }\n    if(samples>=4){\n      R3D <- paste(SampleNames3[4], collapse = NULL)\n      pp4 <- ggplot2::ggplot(DF.3SampleGeneData, aes_string(x=R3D)) + ggplot2::geom_density(adjust = 1/5, color = \"navy blue\") + ggplot2::theme_gray() + ggplot2::ggtitle(R3D) + ggplot2::ylab(\"Density\") + ggplot2::xlab(xx)\n    }\n    if(samples>=5){\n      R3E <- paste(SampleNames3[5], collapse = NULL)\n      pp5 <- ggplot2::ggplot(DF.3SampleGeneData, aes_string(x=R3E)) + ggplot2::geom_density(adjust = 1/5, color = \"navy blue\") + ggplot2::theme_gray() + ggplot2::ggtitle(R3E) + ggplot2::ylab(\"Density\") + ggplot2::xlab(xx)\n    }\n    if(samples>=6){\n      R3F <- paste(SampleNames3[6], collapse = NULL)\n      pp6 <- ggplot2::ggplot(DF.2SampleGeneData, aes_string(x=R3F)) + ggplot2::geom_density(adjust = 1/5, color = \"navy blue\") + ggplot2::theme_gray() + ggplot2::ggtitle(R3F) + ggplot2::ylab(\"Density\") + ggplot2::xlab(xx)\n    }\n    if(samples==1){x3 = pp1}\n    if(samples==2){x3 = gridExtra::grid.arrange(pp1, pp2, ncol=2)}\n    if(samples==3){x3 = gridExtra::grid.arrange(pp1, pp2, pp3, ncol=3)}\n    if(samples==4){x3 = gridExtra::grid.arrange(pp1, pp2, pp3, pp4,  ncol=2)}\n    if(samples==5){x3 = gridExtra::grid.arrange(pp1, pp2, pp3, pp4, pp5, ncol=2)}\n    if(samples==6){x3 = gridExtra::grid.arrange(pp1, pp2, pp3, pp4, pp5, pp6, ncol=2)}\n  }\n\n  if(regions>=4){\n    DF.4 <- DipOutputDF[DipOutputDF$Region==labels[4],]\n    ifelse(nrow(DF.4)<samples, print(\"error: too few observations\n                                     remaining in region 4 for declared number of samples to be selected\"), print(\"Region 4 samples selected\"))\n    DF.4Samples <- DF.4[sample(nrow(DF.4), size = samples, replace = FALSE),]\n    DF.4Names <- DF.4Samples[,\"GeneID\"]\n    DF.4SampleGeneData <- data.frame(t(RNAdataDF_R[row.names(RNAdataDF_R) %in% DF.4Names, ]))\n    SampleNames4 <- DF.4Names\n    R4A <- paste(SampleNames4[1], collapse = NULL)\n    pp1 <- ggplot2::ggplot(DF.4SampleGeneData, aes_string(x=R4A)) + ggplot2::geom_density(adjust = 1/5, color = \"navy blue\") + ggplot2::theme_gray() + ggplot2::ggtitle(R4A) + ggplot2::ylab(\"Density\") + ggplot2::xlab(xx)\n    if(samples>=2){\n      R4B <- paste(SampleNames4[2], collapse = NULL)\n      pp2 <- ggplot2::ggplot(DF.4SampleGeneData, aes_string(x=R4B)) + ggplot2::geom_density(adjust = 1/5, color = \"navy blue\") + ggplot2::theme_gray() + ggplot2::xlab(xx) + ggplot2::ggtitle(R4B) + ggplot2::ylab(\"Density\")\n    }\n    if(samples>=3){\n      R4C <- paste(SampleNames4[3], collapse = NULL)\n      pp3 <- ggplot2::ggplot(DF.4SampleGeneData, aes_string(x=R4C)) + ggplot2::geom_density(adjust = 1/5, color = \"navy blue\") + ggplot2::theme_gray() + ggplot2::ggtitle(R4C) + ggplot2::ylab(\"Density\") + ggplot2::xlab(xx)\n    }\n    if(samples>=4){\n      R4D <- paste(SampleNames4[4], collapse = NULL)\n      pp4 <- ggplot2::ggplot(DF.4SampleGeneData, aes_string(x=R4D)) + ggplot2::geom_density(adjust = 1/5, color = \"navy blue\") + ggplot2::theme_gray() + ggplot2::ggtitle(R4D) + ggplot2::ylab(\"Density\") + ggplot2::xlab(xx)\n    }\n    if(samples>=5){\n      R4E <- paste(SampleNames4[5], collapse = NULL)\n      pp5 <- ggplot2::ggplot(DF.4SampleGeneData, aes_string(x=R4E)) + ggplot2::geom_density(adjust = 1/5, color = \"navy blue\") + ggplot2::theme_gray() + ggplot2::ggtitle(R4E) + ggplot2::ylab(\"Density\") + ggplot2::xlab(xx)\n    }\n    if(samples>=6){\n      R4F <- paste(SampleNames4[6], collapse = NULL)\n      pp6 <- ggplot2::ggplot(DF.4SampleGeneData, aes_string(x=R4F)) + ggplot2::geom_density(adjust = 1/5, color = \"navy blue\") + ggplot2::theme_gray() + ggplot2::ggtitle(R4F) + ggplot2::ylab(\"Density\") + ggplot2::xlab(xx)\n    }\n    if(samples==1){x4 = pp1}\n    if(samples==2){x4 = gridExtra::grid.arrange(pp1, pp2, ncol=2)}\n    if(samples==3){x4 = gridExtra::grid.arrange(pp1, pp2, pp3, ncol=3)}\n    if(samples==4){x4 = gridExtra::grid.arrange(pp1, pp2, pp3, pp4,  ncol=2)}\n    if(samples==5){x4 = gridExtra::grid.arrange(pp1, pp2, pp3, pp4, pp5, ncol=2)}\n    if(samples==6){x4 = gridExtra::grid.arrange(pp1, pp2, pp3, pp4, pp5, pp6, ncol=2)}\n  }\n\n  if(regions>=5){\n    DF.5 <- DipOutputDF[DipOutputDF$Region==labels[5],]\n    ifelse(nrow(DF.5)<samples, print(\"error: too few observations\n                                     remaining in region 5 for declared number of samples to be selected\"), print(\"Region 5 samples selected\"))\n    DF.5Samples <- DF.5[sample(nrow(DF.5), size = samples, replace = FALSE),]\n    DF.5Names <- DF.5Samples[,\"GeneID\"]\n    DF.5SampleGeneData <- data.frame(t(RNAdataDF_R[row.names(RNAdataDF_R) %in% DF.5Names, ]))\n    SampleNames5 <- DF.5Names\n    R5A <- paste(SampleNames5[1], collapse = NULL)\n    pp1 <- ggplot2::ggplot(DF.5SampleGeneData, aes_string(x=R5A)) + ggplot2::geom_density(adjust = 1/5, color = \"navy blue\") + ggplot2::theme_gray() + ggplot2::ggtitle(R5A) + ggplot2::ylab(\"Density\") + ggplot2::xlab(xx)\n    if(samples>=2){\n      R2B <- paste(SampleNames5[2], collapse = NULL)\n      pp2 <- ggplot2::ggplot(DF.5SampleGeneData, aes_string(x=R5B)) + ggplot2::geom_density(adjust = 1/5, color = \"navy blue\") + ggplot2::theme_gray() + ggplot2::xlab(xx) + ggplot2::ggtitle(R5B) + ggplot2::ylab(\"Density\")\n    }\n    if(samples>=3){\n      R5C <- paste(SampleNames5[3], collapse = NULL)\n      pp3 <- ggplot2::ggplot(DF.5SampleGeneData, aes_string(x=R5C)) + ggplot2::geom_density(adjust = 1/5, color = \"navy blue\") + ggplot2::theme_gray() + ggplot2::ggtitle(R5C) + ggplot2::ylab(\"Density\") + ggplot2::xlab(xx)\n    }\n    if(samples>=4){\n      R2D <- paste(SampleNames5[4], collapse = NULL)\n      pp4 <- ggplot2::ggplot(DF.5SampleGeneData, aes_string(x=R5D)) + ggplot2::geom_density(adjust = 1/5, color = \"navy blue\") + ggplot2::theme_gray() + ggplot2::ggtitle(R5D) + ggplot2::ylab(\"Density\") + ggplot2::xlab(xx)\n    }\n    if(samples>=5){\n      R5E <- paste(SampleNames5[5], collapse = NULL)\n      pp5 <- ggplot2::ggplot(DF.5SampleGeneData, aes_string(x=R5E)) + ggplot2::geom_density(adjust = 1/5, color = \"navy blue\") + ggplot2::theme_gray() + ggplot2::ggtitle(R5E) + ggplot2::ylab(\"Density\") + ggplot2::xlab(xx)\n    }\n    if(samples>=6){\n      R5F <- paste(SampleNames5[6], collapse = NULL)\n      pp6 <- ggplot2::ggplot(DF.5SampleGeneData, aes_string(x=R5F)) + ggplot2::geom_density(adjust = 1/5, color = \"navy blue\") + ggplot2::theme_gray() + ggplot2::ggtitle(R5F) + ggplot2::ylab(\"Density\") + ggplot2::xlab(xx)\n    }\n    if(samples==1){x5 = pp1}\n    if(samples==2){x5 = gridExtra::grid.arrange(pp1, pp2, ncol=2)}\n    if(samples==3){x5 = gridExtra::grid.arrange(pp1, pp2, pp3, ncol=3)}\n    if(samples==4){x5 = gridExtra::grid.arrange(pp1, pp2, pp3, pp4,  ncol=2)}\n    if(samples==5){x5 = gridExtra::grid.arrange(pp1, pp2, pp3, pp4, pp5, ncol=2)}\n    if(samples==6){x5 = gridExtra::grid.arrange(pp1, pp2, pp3, pp4, pp5, pp6, ncol=2)}\n  }\n\n  return(x1)\n  try(return(x2))\n  try(return(x3))\n  try(return(x4))\n  try(return(x5))\n\n}\n\nplotSamplesByName <- function(nameList, RNAdata) {\n\n  if(missing(ncol) && length(nameList)==any(c(2, 4, 6))) {\n    ncol <- 2\n  }\n\n  if(missing(ncol) && length(nameList)==any(c(3, 5, 7))) {\n    ncol <- 3\n  }\n\n  if(missing(ncol) && length(nameList)==1) {\n    ncol <- 1\n  }\n\n  if(missing(ncol) && length(nameList)==8) {\n    ncol <- 4\n  }\n\n\n  RNAdataDF <- data.frame(read.table(RNAdata))\n  GeneData <- data.frame(t(RNAdataDF[row.nameList(RNAdataDF) %in% nameList, ]))\n  R1 <- paste(nameList[1], collapse = NULL)\n  try(R2 <- paste(nameList[2], collapse = NULL))\n  try(R3 <- paste(nameList[3], collapse = NULL))\n  try(R4 <- paste(nameList[4], collapse = NULL))\n  try(R5 <- paste(nameList[5], collapse = NULL))\n  try(R6 <- paste(nameList[6], collapse = NULL))\n  try(R7 <- paste(nameList[7], collapse = NULL))\n  try(R8 <- paste(nameList[8], collapse = NULL))\n  pp1 <- ggplot2::ggplot(GeneData, aes_string(x=R1)) + ggplot2::geom_density(adjust = 1/5, color = \"navy blue\") + ggplot2::theme_gray() +\n    ggplot2::ggtitle(R1) + ggplot2::ylab(\"Density\") + ggplot2::xlab(\"Relative Expression\")\n\n  if(!is.na(nameList[2])) {\n    pp2 <- ggplot2::ggplot(GeneData, aes_string(x=R2)) + ggplot2::geom_density(adjust = 1/5, color = \"navy blue\") + ggplot2::theme_gray() +\n      ggplot2::ggtitle(R2) + ggplot2::ylab(\"Density\") + ggplot2::xlab(\"Relative Expression\")\n  }\n\n  if(!is.na(nameList[3])) {\n    pp3 <- ggplot2::ggplot(GeneData, aes_string(x=R3)) + ggplot2::geom_density(adjust = 1/5, color = \"navy blue\") + ggplot2::theme_gray() +\n      ggplot2::ggtitle(R3) + ggplot2::ylab(\"Density\") + ggplot2::xlab(\"Relative Expression\")\n  }\n\n  if(!is.na(nameList[4])) {\n    pp4 <- ggplot2::ggplot(GeneData, aes_string(x=R4)) + ggplot2::geom_density(adjust = 1/5, color = \"navy blue\") + ggplot2::theme_gray() +\n      ggplot2::ggtitle(R4) + ggplot2::ylab(\"Density\") + ggplot2::xlab(\"Relative Expression\")\n  }\n\n  if(!is.na(nameList[5])) {\n    pp5 <- ggplot2::ggplot(GeneData, aes_string(x=R5)) + ggplot2::geom_density(adjust = 1/5, color = \"navy blue\") + ggplot2::theme_gray() +\n      ggplot2::ggtitle(R5) + ggplot2::ylab(\"Density\") + ggplot2::xlab(\"Relative Expression\")\n  }\n\n  if(!is.na(nameList[6])) {\n    pp6 <- ggplot2::ggplot(GeneData, aes_string(x=R6)) + ggplot2::geom_density(adjust = 1/5, color = \"navy blue\") + ggplot2::theme_gray() +\n      ggplot2::ggtitle(R6) + ggplot2::ylab(\"Density\") + ggplot2::xlab(\"Relative Expression\")\n  }\n\n  if(!is.na(nameList[7])) {\n    pp7 <- ggplot2::ggplot(GeneData, aes_string(x=R7)) + ggplot2::geom_density(adjust = 1/5, color = \"navy blue\") + ggplot2::theme_gray() +\n      ggplot2::ggtitle(R7) + ggplot2::ylab(\"Density\") + ggplot2::xlab(\"Relative Expression\")\n  }\n\n  if(!is.na(nameList[8])) {\n    pp8 <- ggplot2::ggplot(GeneData, aes_string(x=R8)) + ggplot2::geom_density(adjust = 1/5, color = \"navy blue\") + ggplot2::theme_gray() +\n      ggplot2::ggtitle(R8) + ggplot2::ylab(\"Density\") + ggplot2::xlab(\"Relative Expression\")\n  }\n\n  if(length(nameList)==1){\n    x1 <- pp1\n  }\n\n  if(length(nameList)==2){\n    x1 <- gridExtra::grid.arrange(pp1, pp2, ncol = ncol)\n  }\n\n  if(length(nameList)==3){\n    x1 <- gridExtra::grid.arrange(pp1, pp2, pp3, ncol = ncol)\n  }\n\n  if(length(nameList)==4){\n    x1 <- gridExtra::grid.arrange(pp1, pp2, pp3, pp4, ncol = ncol)\n  }\n\n  if(length(nameList)==5){\n    x1 <- gridExtra::grid.arrange(pp1, pp2, pp3, pp4, pp5, ncol = ncol)\n  }\n\n  if(length(nameList)==6){\n    x1 <- gridExtra::grid.arrange(pp1, pp2, pp3, pp4, pp5, pp6, ncol = ncol)\n  }\n\n  if(length(nameList)==7){\n    x1 <- gridExtra::grid.arrange(pp1, pp2, pp3, pp4, pp5, pp6, pp7, ncol = ncol)\n  }\n\n  if(length(nameList)==8){\n    x1 <- gridExtra::grid.arrange(pp1, pp2, pp3, pp4, pp5, pp6, pp7, pp8, ncol = ncol)\n  }\n}\n\npreviewDipDistribution <- function(RNAdata, rawRNAdata, minimumCounts, barLine){\n\n  RNAdataMat <- as.matrix(RNAdata)\n  if(missing(barLine)){barLine <- 0}\n\n  if(missing(rawRNAdata)){\n    RNAdataMat <- as.matrix(RNAdata)\n  } else{\n    RNAdataMat <- as.matrix(RNAdata)\n    RNAdataDF <- data.frame(RNAdataMat)\n    rawRNAdata$max <- 0\n    rawRNAdata$max <- apply(rawRNAdata, 1, max)\n    RNArawbelow <- rawRNAdata[which(rawRNAdata$max<minimumCounts),]\n    rr <- row.names(RNArawbelow)\n    RNAdataDF_R <- RNAdataDF[!(row.names(RNAdataDF) %in% rr),]\n    RNAdataMat <- as.matrix(RNAdataDF_R)\n  }\n\n  DipOutput <- matrix(nrow=nrow(RNAdataMat), ncol=2) #preparing a matrix to receive output in the function step\n\n  for (k in 1:nrow(RNAdataMat)){\n\n    e <- diptest::dip(RNAdataMat[k,], full.result = FALSE, min.is.0 = FALSE, debug = FALSE) #actual dip statistical test\n    f <- diptest::dip.test(RNAdataMat[k,], simulate.p.value = FALSE, B = 2000)\n    DipOutput[k,1] <- e #save output into pre-prepared matrix\n    DipOutput[k,2] <- f$p_value\n    ##consider extracting the rownames off RNAdata as a vector, which you can then reimpute here\n  }\n\n  DipOutputDF <- data.frame(DipOutput)\n  colnames(DipOutputDF) <- c(\"Dip\", \"p-value\")\n  row.names(DipOutputDF) <- row.names(RNAdataMat)\n  return(DipOutputDF)\n\n  x1 <- ggplot2::ggplot(DipOutputDF, aes(x=Dip)) +\n    ggplot2::geom_density() + ggplot2::geom_vline(xintercept=barLine, colour=\"#FF9999\") +\n    ggplot2::scale_x_continuous(breaks = round(seq(min(DipOutputDF$Dip), max(DipOutputDF$Dip), by = 0.01),2)) +\n    ggplot2::theme(plot.title = element_text(hjust = 0.5)) + ggplot2::labs(title= \"Bimodality among RNA expression patterns\",x=\"Hartigan's Dip Score\")\n\n  x2 <- ggplot2::ggplot(DipOutputDF, aes(x = p-value)) +\n    ggplot2::geom_density() + ggplot2::geom_vline(xintercept = barLine, colour = \"#FF9999\") +\n    ggplot2::scale_x_continuous(breaks = round(seq(min(DipOutputDF$p-value),\n                                          max(DipOutputDF$p-value), by = 0.01), 2)) + ggplot2::theme(plot.title = element_text(hjust = 0.5)) +\n    ggplot2::labs(title = \"Bimodality among RNA expression patterns\",\n         x = \"Hartigan's Dip Score\")\n  return(x1)\n  return(x2)\n}\n",
    "created" : 1501879423638.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "392|50|490|0|\n",
    "hash" : "1902338185",
    "id" : "82731FE4",
    "lastKnownWriteTime" : 1501880627,
    "last_content_update" : 1501880709179,
    "path" : "~/DipEx/R/Dip_Fxns.R",
    "project_path" : "R/Dip_Fxns.R",
    "properties" : {
        "docOutlineVisible" : "0"
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}